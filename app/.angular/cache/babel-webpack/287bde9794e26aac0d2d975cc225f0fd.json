{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.endpoint = \"http://localhost:5000/api\";\n      this.headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n      this.currentUser = {}; //Almacenamos respuesta del signIn => Token + _id + expires\n    }\n\n    signup(user) {\n      const api = `${this.endpoint}/signup`;\n      return this.http.post(api, user).pipe(catchError(this.handleError));\n    }\n\n    signIn(userSignIn) {\n      const api = `${this.endpoint}/signin`;\n      return this.http.post(api, userSignIn).subscribe(res => {\n        localStorage.setItem(\"access_token\", res.token);\n        this.currentUser = res;\n        this.router.navigate([\"home\"]);\n      });\n    }\n\n    getToken() {\n      return localStorage.getItem(\"access_token\");\n    }\n\n    doLogout() {\n      let removeToken = localStorage.removeItem(\"access_token\");\n\n      if (removeToken == null) {\n        this.router.navigate([\"home\"]);\n      }\n    }\n\n    get isLoggedIn() {\n      let authToken = localStorage.getItem(\"access_token\");\n      return authToken !== null ? true : false;\n    } // Error \n\n\n    handleError(error) {\n      let msg = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // client-side error\n        msg = error.error.message;\n      } else {\n        // server-side error\n        msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      return throwError(msg);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}